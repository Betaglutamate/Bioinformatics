def count_kmer(kmer, pattern):
    num_matches = 0
    for num, _ in enumerate(kmer):
        window = kmer[num: (num+len(pattern))]
        if window == pattern:
            num_matches = num_matches + 1

    return num_matches
            
count_kmer("CGCGATACGTTACATACATGATAGACCGCGCGCGATCATATCGCGATTATC", "CGCG") #3

most_freq = "CGCCTAAATAGCCTCGCGGAGCCTTATGTCATACTCGTCCT"

def frequency_table(text, kmer_len):
    freq_map = {}
    nt = len(text)
    nk = kmer_len
    
    for i in range(0, nt-nk):
        pattern = text[i : i+nk]
        if not freq_map.get(pattern):
            freq_map[pattern] = 1
        else:
            freq_map[pattern] = freq_map[pattern] + 1
        
    return freq_map

freq_map = frequency_table(most_freq, 3)

max(freq_map, key=freq_map.get) # this is the easy way to get the highest freq one

test_pattern = "TATGCTAGGTCCAAGTCCAATATATGCTAGCTCTACGTCCAATATATGCTAGTCCAATAGTCTTCTTCCAATAGTCCAAGGTCTTCTCTCTACGGTCTTCTTATGCTAGCTCTACGCTCTACGTATGCTAGTCCAATACTCTACGTATGCTAGGTCCAAGGTCTTCTTATGCTAGGTCTTCTCTCTACGCTCTACGTATGCTAGTATGCTAGCTCTACGGTCCAAGCTCTACGTCCAATACTCTACGTATGCTAGGTCCAAGGTCTTCTGTCTTCTTCCAATATCCAATAGTCCAAGTATGCTAGGTCCAAGGTCTTCTGTCTTCTGTCCAAGGTCCAAGGTCCAAGCTCTACGGTCTTCTTATGCTAGCTCTACGTATGCTAGGTCCAAGTCCAATATCCAATATATGCTAGTCCAATATCCAATAGTCTTCTGTCTTCTCTCTACGCTCTACGGTCCAAGGTCCAAGTCCAATATATGCTAGGTCCAAGGTCTTCTTATGCTAGGTCTTCTTCCAATAGTCTTCTGTCCAAGTCCAATAGTCCAAGGTCTTCTGTCTTCTTATGCTAGTATGCTAGGTCTTCTTCCAATATCCAATATCCAATATCCAATAGTCCAAGCTCTACGTCCAATATATGCTAGTATGCTAGCTCTACGGTCCAAGTATGCTAGCTCTACGTCCAATAGTCTTCTTCCAATATATGCTAGCTCTACGGTCCAAGCTCTACGTCCAATAGTCTTCTTATGCTAGCTCTACGGTCCAAGGTCCAAGTATGCTAGGTCTTCTGTCCAAGTCCAATACTCTACGTATGCTAGGTCTTCTTATGCTAGGTCTTCTGTCTTCTCTCTACGGTCTTCTCTCTACGGTCTTCTCTCTACG"
test_pattern_1 = "CTTCCCAAAGACTTCTCTGATGTAGCAAAGACTTCTCTCGCTTTGCCGGTCTCGAGGATGTAGCAAAGACTTCTCTAGACTTCTCTAGACTTCTCTCTTCCCAACTTCCCAAGTCTCGAGGATGTAGCAAGATGTAGCAACGCTTTGCCGCTTCCCAAGTCTCGAGAGACTTCTCTGTCTCGAGCTTCCCAACGCTTTGCCGGTCTCGAGGTCTCGAGCTTCCCAAGTCTCGAGCTTCCCAACGCTTTGCCGCTTCCCAAGTCTCGAGCTTCCCAACTTCCCAAGTCTCGAGGTCTCGAGCTTCCCAAAGACTTCTCTGTCTCGAGCTTCCCAAAGACTTCTCTCTTCCCAACGCTTTGCCGCTTCCCAACGCTTTGCCGGATGTAGCAAAGACTTCTCTCGCTTTGCCGCGCTTTGCCGGATGTAGCAAAGACTTCTCTAGACTTCTCTCTTCCCAACGCTTTGCCGAGACTTCTCTCTTCCCAAGATGTAGCAACGCTTTGCCGGTCTCGAGCGCTTTGCCGGATGTAGCAAGTCTCGAGCTTCCCAAGATGTAGCAAGTCTCGAGCGCTTTGCCGGATGTAGCAAAGACTTCTCTCTTCCCAAGTCTCGAGCTTCCCAAAGACTTCTCTAGACTTCTCTGTCTCGAGGATGTAGCAAGTCTCGAGCTTCCCAAAGACTTCTCTAGACTTCTCTAGACTTCTCTCTTCCCAACTTCCCAAGTCTCGAGGTCTCGAGGTCTCGAGGTCTCGAGGTCTCGAGGATGTAGCAACTTCCCAACTTCCCAAAGACTTCTCTAGACTTCTCTGATGTAGCAACTTCCCAACGCTTTGCCGGTCTCGAGAGACTTCTCTGATGTAGCAACTTCCCAAGATGTAGCAAGTCTCGAGGTCTCGAGCGCTTTGCCGGATGTAGCAAAGACTTCTCTAGACTTCTCTGATGTAGCAAGTCTCGAGGATGTAGCAAAGACTTCTCT"
test_length = 11

freq_map = frequency_table(test_pattern_1, test_length)

max_value = max(freq_map.values())

[k for k,v in freq_map.items() if v == max_value]

def make_complement(input_string):
    reverse_complement = []
    for l in input_string:
        if l == "A":
            O = "T"
        elif l == "T":
            O = "A"
        elif l == "C":
            O = "G"
        elif l == "G":
            O = "C"
        reverse_complement.append(O)
    reverse_comp = ''.join(reverse_complement)[::-1]
    
    return reverse_comp

test_string = "CCAGATC"
make_complement(test_string)

pattern = "CGC"
text = "ATGACTTCGCTGTTACGCGC"

import re

def find_start(text, pattern):
    pos_ahead_pattern = "(?=" + pattern + ")"
    locations = [m.start() for m in re.finditer(pos_ahead_pattern, text)]
    return locations

find_start(text, pattern)